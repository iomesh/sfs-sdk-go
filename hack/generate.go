package main

import (
	_ "embed"
	"log"
	"os"
	"text/template"
)

//go:embed types.tpl
var typesContent string

//go:embed boilerplate.go.txt
var boilerplate string

//go:generate go run generate.go
func main() {
	oem := os.Getenv("OEM")
	var path string
	switch oem {
	case "arcfra.com":
		path = "../pkg/apis/arcfra.com/sfs/v1/types.go"
	default:
		path = "../pkg/apis/iomesh.io/sfs/v1/types.go"
	}

	data := struct {
		Header       string
		AutoGenerate string
	}{
		Header:       boilerplate,
		AutoGenerate: "// Code generated by generate.go. DO NOT EDIT.",
	}
	// Parse the template
	t := template.Must(template.New("typesContent").Parse(typesContent))

	// Create the generated file
	file, err := os.Create(path)
	if err != nil {
		log.Fatalf("Failed to create file: %s", err)
	}
	defer file.Close()

	// Execute the template and write to the file
	err = t.Execute(file, data)
	if err != nil {
		log.Fatalf("Failed to execute template: %s", err)
	}

	log.Println(path, " has been generated successfully!")
}
