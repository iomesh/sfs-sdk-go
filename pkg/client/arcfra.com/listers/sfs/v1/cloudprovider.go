/*
Copyright 2023 The IOMesh Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/iomesh/sfs-sdk-go/pkg/apis/arcfra.com/sfs/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudProviderLister helps list CloudProviders.
// All objects returned here must be treated as read-only.
type CloudProviderLister interface {
	// List lists all CloudProviders in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.CloudProvider, err error)
	// CloudProviders returns an object that can list and get CloudProviders.
	CloudProviders(namespace string) CloudProviderNamespaceLister
	CloudProviderListerExpansion
}

// cloudProviderLister implements the CloudProviderLister interface.
type cloudProviderLister struct {
	indexer cache.Indexer
}

// NewCloudProviderLister returns a new CloudProviderLister.
func NewCloudProviderLister(indexer cache.Indexer) CloudProviderLister {
	return &cloudProviderLister{indexer: indexer}
}

// List lists all CloudProviders in the indexer.
func (s *cloudProviderLister) List(selector labels.Selector) (ret []*v1.CloudProvider, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CloudProvider))
	})
	return ret, err
}

// CloudProviders returns an object that can list and get CloudProviders.
func (s *cloudProviderLister) CloudProviders(namespace string) CloudProviderNamespaceLister {
	return cloudProviderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudProviderNamespaceLister helps list and get CloudProviders.
// All objects returned here must be treated as read-only.
type CloudProviderNamespaceLister interface {
	// List lists all CloudProviders in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.CloudProvider, err error)
	// Get retrieves the CloudProvider from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.CloudProvider, error)
	CloudProviderNamespaceListerExpansion
}

// cloudProviderNamespaceLister implements the CloudProviderNamespaceLister
// interface.
type cloudProviderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudProviders in the indexer for a given namespace.
func (s cloudProviderNamespaceLister) List(selector labels.Selector) (ret []*v1.CloudProvider, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CloudProvider))
	})
	return ret, err
}

// Get retrieves the CloudProvider from the indexer for a given namespace and name.
func (s cloudProviderNamespaceLister) Get(name string) (*v1.CloudProvider, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("cloudprovider"), name)
	}
	return obj.(*v1.CloudProvider), nil
}
