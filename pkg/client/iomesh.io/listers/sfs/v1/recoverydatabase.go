/*
Copyright 2023 The IOMesh Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/iomesh/sfs-sdk-go/pkg/apis/iomesh.io/sfs/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RecoveryDatabaseLister helps list RecoveryDatabases.
// All objects returned here must be treated as read-only.
type RecoveryDatabaseLister interface {
	// List lists all RecoveryDatabases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RecoveryDatabase, err error)
	// RecoveryDatabases returns an object that can list and get RecoveryDatabases.
	RecoveryDatabases(namespace string) RecoveryDatabaseNamespaceLister
	RecoveryDatabaseListerExpansion
}

// recoveryDatabaseLister implements the RecoveryDatabaseLister interface.
type recoveryDatabaseLister struct {
	indexer cache.Indexer
}

// NewRecoveryDatabaseLister returns a new RecoveryDatabaseLister.
func NewRecoveryDatabaseLister(indexer cache.Indexer) RecoveryDatabaseLister {
	return &recoveryDatabaseLister{indexer: indexer}
}

// List lists all RecoveryDatabases in the indexer.
func (s *recoveryDatabaseLister) List(selector labels.Selector) (ret []*v1.RecoveryDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RecoveryDatabase))
	})
	return ret, err
}

// RecoveryDatabases returns an object that can list and get RecoveryDatabases.
func (s *recoveryDatabaseLister) RecoveryDatabases(namespace string) RecoveryDatabaseNamespaceLister {
	return recoveryDatabaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RecoveryDatabaseNamespaceLister helps list and get RecoveryDatabases.
// All objects returned here must be treated as read-only.
type RecoveryDatabaseNamespaceLister interface {
	// List lists all RecoveryDatabases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RecoveryDatabase, err error)
	// Get retrieves the RecoveryDatabase from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.RecoveryDatabase, error)
	RecoveryDatabaseNamespaceListerExpansion
}

// recoveryDatabaseNamespaceLister implements the RecoveryDatabaseNamespaceLister
// interface.
type recoveryDatabaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RecoveryDatabases in the indexer for a given namespace.
func (s recoveryDatabaseNamespaceLister) List(selector labels.Selector) (ret []*v1.RecoveryDatabase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RecoveryDatabase))
	})
	return ret, err
}

// Get retrieves the RecoveryDatabase from the indexer for a given namespace and name.
func (s recoveryDatabaseNamespaceLister) Get(name string) (*v1.RecoveryDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("recoverydatabase"), name)
	}
	return obj.(*v1.RecoveryDatabase), nil
}
